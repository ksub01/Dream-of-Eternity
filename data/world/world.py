from colorama import Fore, Style
from progress.bar import FillingCirclesBar, FillingSquaresBar

INVENTORY_MESSAGE = Fore.GREEN + Style.BRIGHT
DIE_MASSAGE = Fore.RED + Style.BRIGHT
HELP_MESSAGE = Fore.CYAN + Style.DIM
TOWN_MESSAGE = Style.DIM + Fore.LIGHTYELLOW_EX
MENU_TOWN_MASSAGE = Fore.LIGHTBLUE_EX
STORY_MESSAGE = Fore.YELLOW + Style.DIM
MESSAGE_DIALOGUE = Fore.GREEN
LVL_UP_MESSAGE = Fore.YELLOW + Style.BRIGHT
MESSAGE_DAMAGE = Fore.GREEN + Style.DIM
MESSAGE_HEAL = Fore.MAGENTA + Style.BRIGHT


def two_choice():
    print('–î–∞ -> 1')
    print('–ù–µ—Ç -> 2')


class Creature:
    """–∂–∏–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ"""

    def __init__(self, **par):
        """–ù–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        # –ø–µ—Ä–µ–¥–∞—á–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        standard = dict(heart=0, attack=0, force=0, defence=0, dexterity=0, wisdom=0, lvl=0, exp=0, gold=0, sign='üî•',
                        target='', cls='')
        for i in standard:
            if i not in par:
                par[i] = standard[i]
        # –æ–ø—ã—Ç –¥–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        self.exp_to_lvl = [0, 25, 50, 100, 500, 2500, 7500, 17000, 26000, 52000, 104000, 208000, 512000,
                           1024000]
        self.full_heart = dict(value=par['heart'], sign='üíô', name='–ó–¥–æ—Ä–æ–≤—å–µ ', front=Fore.RED)
        self.full_attack = dict(value=par['attack'], sign='üó°', name='–ê—Ç–∞–∫–∞ ', front=Fore.LIGHTGREEN_EX)
        self.full_force = dict(value=par['force'], sign='üëä', name='–°–∏–ª–∞ ', front=Fore.LIGHTBLUE_EX + Style.DIM)
        self.full_defence = dict(value=par['defence'], sign='üõ°', name='–ó–∞—â–∏—Ç–∞ ', front=Fore.LIGHTMAGENTA_EX)
        self.full_dexterity = dict(value=par['dexterity'], sign='ü•æ', name='–õ–æ–≤–∫–æ—Å—Ç—å ', front=Fore.GREEN)
        self.full_wisdom = dict(value=par['wisdom'], sign='üß†', front=Fore.LIGHTBLUE_EX + Style.DIM,
                                name='–ú—É–¥—Ä–æ—Å—Ç—å ')
        self.lvl = dict(value=par['lvl'], sign='üïÆ', name='–£—Ä–æ–≤–µ–Ω—å ', front=Fore.RED)
        self.exp = dict(value=par['exp'], sign='üåü', name='–û–ø—ã—Ç ', front=Fore.WHITE + Style.BRIGHT)
        self.gold = dict(value=par['gold'], sign='ü™ô', name='–ó–æ–ª–æ—Ç–æ ', front=Fore.YELLOW)
        self.skills = []
        # –∏–º—è –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ
        self.target = dict(value=par['target'], name='–ò–º—è ', front=Fore.GREEN)
        # –∑–Ω–∞—á–æ–∫ –≤ –∏–≥—Ä–µ
        self.sign = dict(value=par['sign'], front=Fore.CYAN)
        # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
        self.cls = dict(value=par['sign'], front=Fore.WHITE)

        self.heart = self.full_heart.copy()
        self.heart['sign'] = '‚ô•'
        self.attack = self.full_attack.copy()
        self.force = self.full_force.copy()
        self.defence = self.full_defence.copy()
        self.dexterity = self.full_dexterity.copy()
        self.wisdom = self.full_wisdom.copy()

    def display_parameter(self, name, en='\n'):
        """–ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –≤—ã–≤–æ–¥–∏–º —Ü–≤–µ—Ç –∏ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        print(getattr(self, name)['front'] + str(getattr(self, name)['value']) + Style.RESET_ALL, end=en)

    def display_name_and_par(self, name, en='\n'):
        """–ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –≤—ã–≤–æ–¥–∏–º —Ü–≤–µ—Ç –∏ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        print(getattr(self, name)['front'] + getattr(self, name)['name'] + str(getattr(self, name)['value'])
              + Style.RESET_ALL, end=en)

    def display_par_and_sign(self, name, en='\n'):
        """–ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –≤—ã–≤–æ–¥–∏–º —Ü–≤–µ—Ç –∏ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        print(getattr(self, name)['front'] + getattr(self, name)['sign'] + ' ' + str(getattr(self, name)['value'])
              + Style.RESET_ALL, end=en)

    def progress_exp(self):
        """–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è –≤ –≤–∏–¥–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        s = '{}{}'.format(Fore.BLUE, 'üìñ')
        lvl = self.lvl['value']
        exp_for_next = self.exp_to_lvl[lvl] - self.exp_to_lvl[lvl - 1]
        bar = FillingCirclesBar(s, max=exp_for_next)
        bar.index = self.exp['value'] - self.exp_to_lvl[lvl - 1]
        bar.update()
        print()

    def progress_hp(self):
        """–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è –≤ –≤–∏–¥–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        s = '{}{}'.format(Fore.RED, '‚ù§ ')
        bar = FillingSquaresBar(s, max=self.full_heart['value'])
        bar.index = self.heart['value']
        bar.update()
        print()

    def _gather_attrs(self):
        attrs = []
        for key in sorted(self.__dict__):
            attrs.append('%s=%s' % (key, getattr(self, key)))
        return ', '.join(attrs)

    def _reset_front(self):
        """–°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞"""
        print(Style.RESET_ALL)

    def __repr__(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞—Å—Å–∞—Ö"""
        return '[%s: %s]' % (self.__class__.__name__, self._gather_attrs())

    def display(self):
        """–û—Ç—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ—Ä–æ—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –≥–µ—Ä–æ—è"""
        print(Fore.YELLOW + '‚îÄ' * 40)
        self.display_parameter('target', en=' ')
        self.display_name_and_par('lvl', en=' ')
        self.display_parameter('sign')
        self.progress_hp()
        self.progress_exp()
        # –≤—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞
        for atr in ('gold', 'attack', 'force', 'defence', 'dexterity', 'wisdom'):
            self.display_par_and_sign(atr, en='   ')
        self._reset_front()
        print(Fore.YELLOW + '‚îÄ' * 40 + Style.RESET_ALL)

    def set_name(self, nm):
        """–î–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è –æ–±—ä–µ–∫—Ç—É"""
        # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if nm:
            self.target['value'] = nm
            return
        while True:
            print('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
            nm = input()
            print('–£–≤–µ—Ä–µ–Ω—ã?', nm)
            two_choice()
            st = input()
            if st == '1':
                self.target['value'] = Fore.GREEN + nm + Style.RESET_ALL
                break

    def recovery_parameter(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è"""
        self.heart = self.full_heart
        self.attack = self.full_attack
        self.force = self.full_force
        self.defence = self.full_defence
        self.dexterity = self.full_dexterity
        self.wisdom = self.full_wisdom

    def alive(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –∂–∏–≤"""
        return self.heart['value'] > 0

    def gold_spending(self, gold):
        """–í —Ñ—É–∫–Ω—Ü–∏—é –ø–µ—Ä–µ–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–∞—Ç–∏—Ç –∏–≥—Ä–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –ø–æ–ª—É—á–∏—Ç—Å—è –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –∏–ª–∏ –Ω–µ—Ç"""
        # –µ—Å–ª–∏ –∑–æ–ª–æ—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        if self.gold['value'] >= gold:
            print(self.target['value'] + '-{}'.format(gold) + self.gold['sign'])
            self._reset_front()
            self.gold['value'] -= gold
            return 1
        else:
            print(self.target['value'] + '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞')
            return 0

    def new_value(self, name, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç—Ä–µ—Ö —Ä–µ–∂–∏–º–∞—Ö n-—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, - - —É–º–µ–Ω—å—à–µ–Ω–∏–µ, + - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ"""
        ans = getattr(self, name)['value'] - value
        if ans >= 0:
            self.display_parameter('target', en='')
            print(' -> ' + '-{}'.format(ans), end='')
            self.display_parameter('sign', en='\n')
        else:
            self.display_parameter('target', en='')
            print(' -> ' + '+{}'.format(-ans), end='')
            self.display_parameter('sign', en='\n')
        x = getattr(self, name)
        x['value'] = value
        setattr(self, name, x)

    def increase(self, name, value):
        x = getattr(self, name)
        x['value'] += value
        self.display_parameter('target', en='')
        print(' -> ' + '+{}'.format(value), end='')
        self.display_parameter('sign', en='\n')
        setattr(self, name, x)


class Hero(Creature):
    """–≥–µ—Ä–æ–π"""


class Overlord(Hero):
    """–∫–ª–∞—Å—Å –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å"""
    def __init__(self):
        Creature.__init__(self, lvl=1, heart=25, force=4, dexterity=6, wisdom=3, gold=25, sign='üó°', cls='–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å ')


class Thing:
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –≤–µ—â–∏"""
    def __init__(self, sign):
        self.lvl = {'value': 0}
        self.name = ''
        self.attack = 0
        self.defence = 0
        self.cost = 0
        self.rare = 'usual'
        self.property = ''
        self.sign = sign


class Sword(Thing):
    """–ö–ª–∞—Å—Å –≤—Å–µ—Ö –º–µ—á–µ–π"""
    def __init__(self):
        Thing.__init__(self, sign='üó°')


class Armor(Thing):
    """–ö–ª–∞—Å—Å –±—Ä–æ–Ω–∏"""
    def __init__(self):
        Thing.__init__(self, sign='ü™ñ')


class Ring(Thing):
    """–ö–ª–∞—Å—Å –∫–æ–ª—å—Ü–∞"""
    def __init__(self):
        Thing.__init__(self, sign='üíç')


class Cloak(Thing):
    """–ö–ª–∞—Å—Å –ø–ª–∞—â–∞"""
    def __init__(self):
        Thing.__init__(self, sign='üß£')


class Inventory:
    def __init__(self):
        self.sword = None
        self.armor = None
        self.ring = None
        self.cloak = None
        self.bag = []
        self.chest = []

    def size_bag(self):
        return len(self.bag)

    def size_equipment(self):
        """–ï—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–∞–¥–µ—Ç—ã–µ –≤–µ—â–∏?"""
        return len([i for i in [self.sword, self.armor, self.cloak, self.ring] if i != {}])

    def show_thing(self, item):
        if item:
            attrs = []
            for key in (x for x in dir(self) if not x.startswith('__')):
                attrs.append(key)
            attrs.sort()
            for i in attrs:
                print(getattr(self, i))
        else:
            print('–ü—É—Å—Ç–æ')

    def equipment_show(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—â–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ"""
        print(Fore.BLUE + '‚ïê' * 40 + Style.RESET_ALL)
        self.show_thing(self.sword)
        self.show_thing(self.armor)
        self.show_thing(self.cloak)
        self.show_thing(self.ring)
        print(Fore.BLUE + '‚ïê' * 40 + Style.RESET_ALL)

    def show_things(self):
        """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –≤–µ—â–∏ –∏–≥—Ä–æ–∫–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ"""
        print('„Äå–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å „Äç\n')
        print(Fore.GREEN + '‚îÖ' * 40 + Style.RESET_ALL)
        for item in self.bag:
            self.show_thing(item)
        print(Fore.GREEN + '‚îÖ' * 40 + Style.RESET_ALL)

    def get_thing(self, thing):
        self.bag.append(thing)

    def take_off(self, name):
        self.bag.append(getattr(self, name))
        setattr(self, name, None)

    def lose(self, name):
        """–ü–æ—Ç–µ—Ä—è—Ç—å –Ω–∞–¥–µ—Ç—É—é –≤–µ—â—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        setattr(self, name, None)

    def display(self):
        while True:
            self.equipment_show()
            self.show_things()
            # –≤—ã–±–æ—Ä –≤–∞—Ä–∏–Ω—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—ë–º
            choice = input("–ù–∞–¥–µ—Ç—å ‚ûî 1\n"
                           "–°–Ω—è—Ç—å ‚ûî 2\n"
                           "–û—Ç–∫—Ä—ã—Ç—å —Å—É–Ω–¥—É–∫–∏ ‚ûî 3\n"
                           "–í–µ—Ä–Ω—É—Ç—å—Å—è ‚ûî 4\n")
            if choice == '1':
                self.put_on_thing()
            elif choice == '2':
                self.take_off()
            elif choice == '3':
                self.display_chest()
                if len(inventory['chest']) != 0:
                    open_chest(int(input('–ö–∞–∫–æ–π —Å—É–Ω–¥—É–∫ –æ—Ç–∫—Ä—ã—Ç—å?')))
                else:
                    print('–£ –≤–∞—Å –Ω–µ—Ç —Å—É–Ω–¥—É–∫–æ–≤')
            elif choice == '4':
                break


if __name__ == '__main__':
    hero = Overlord()
    print(hero)
    hero.display()
    print('–¢—Ä–∞—Ç–∏—Ç—å—Å—è 10 –∑–æ–ª–æ—Ç–∞')
    hero.gold_spending(10)
    hero.display()
    # —Ç—Ä–∞—Ç–∏—Ç—Å—è –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ
    print('–¢—Ä–∞—Ç–∏—Ç—å—Å—è 100 –∑–æ–ª–æ—Ç–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ')
    hero.gold_spending(100)
    hero.display()
    print('–ì–µ—Ä–æ–π –ø–æ–ª—É—á–∞–µ—Ç 9 –∑–æ–ª–æ—Ç–∞')
    hero.gold_receive(9)
    hero.display()
    print('–ì–µ—Ä–æ–π –∂–∏–≤: ' + str(hero.alive()))
    hero.display()
    hero.heart['value'] = 0
    hero.display()
    print('–ì–µ—Ä–æ–π –∂–∏–≤: ' + str(hero.alive()))
    print('–í—ã–±–æ—Ä –∏–º–µ–Ω–∏')
    hero.set_name('–î–∞–Ω–∏–ª–∞')
    hero.display()
    print('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–ª—ã –Ω–∞ 100')
    hero.new_value('force', 100)
    hero.display()
    print('–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–æ–≤–∫–æ—Å—Ç–∏ –Ω–∞ 77')
    hero.increase('dexterity', 77)
    hero.display()
    print('–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–º')
    hero.recovery_parameter()
    hero.display()
